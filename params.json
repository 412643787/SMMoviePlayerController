{"name":"Almovieplayercontroller","tagline":"A drop-in replacement for MPMoviePlayerController that exposes the UI elements and allows for maximum customization.","body":"# ALMoviePlayerController\r\n\r\nALMoviePlayerController is a drop-in replacement for MPMoviePlayerController that exposes the UI elements and allows for maximum customization.\r\n\r\n### Features\r\n\r\n* Drop-in replacement for ```MPMoviePlayerController```\r\n* Many different customization options, or you can go with the stock Apple look\r\n* Portrait and landscape support\r\n* Universal (iPhone and iPad) support\r\n* iOS 5.0 - iOS 7 support\r\n* Lightweight, stable component with small memory footprint\r\n\r\n## Installation\r\n\r\nInstallation is easy.\r\n\r\n### Cocoapods\r\n\r\n1. Add ```pod 'ALMoviePlayerController', '~>0.2.0'``` to your Podfile\r\n2. ```#import <ALMoviePlayerController/ALMoviePlayerController.h>``` in your view of choice\r\n\r\n### Manually\r\n\r\n1. [Download the ZIP](https://github.com/alobi/ALMoviePlayerController/archive/master.zip) from Github and copy the ALMoviePlayerController directory to your project\r\n2. Link the ```QuartzCore.framework``` and ```MediaPlayer.framework``` library in your project's Build Phases\r\n3. ```#import \"ALMoviePlayerController.h\"``` in your view of choice\r\n\r\n### Tested Environments\r\n\r\nALMoviePlayerController has been tested to work on iOS 5.0, 5.1 and 6.0 (simulator), iOS 6.1 (device), and iOS 7.0 (device). ALMoviePlayerController requires that ARC be enabled.\r\n\r\n## Example Usage\r\n\r\nThe process is as follows:\r\n\r\n1. Create an ```ALMoviePlayerController``` movie player and assign yourself as its delegate\r\n2. Create the ```ALMoviePlayerControls``` controls (and optionally customize)\r\n3. Assign the controls to the movie player\r\n4. Set the movie player's ```contentURL```, and play the movie\r\n5. On device rotation, adjust movie player frame if it's not in fullscreen (when in fullscreen, rotation is handled automatically)\r\n6. Implement ```ALMoviePlayerController``` delegate methods \r\n\r\n**In code:**\r\n\r\n```objc\r\n// create a movie player\r\nALMoviePlayerController *moviePlayer = [[ALMoviePlayerController alloc] initWithFrame:self.view.frame];\r\nmoviePlayer.delegate = self; //IMPORTANT!\r\n    \r\n// create the controls\r\nALMoviePlayerControls *movieControls = [[ALMoviePlayerControls alloc] initWithMoviePlayer:moviePlayer\r\n                                                                      style:ALMoviePlayerControlsStyleDefault];\r\n\r\n// optionally customize the controls here...\r\n/* \r\n[movieControls setBarColor:[UIColor colorWithRed:195/255.0 green:29/255.0 blue:29/255.0 alpha:0.5]];\r\n[movieControls setTimeRemainingDecrements:YES];\r\n[movieControls setFadeDelay:2.0];\r\n[movieControls setBarHeight:100.f];\r\n[movieControls setSeekRate:2.f];\r\n */\r\n    \r\n// assign the controls to the movie player\r\n[moviePlayer setControls:movieControls];\r\n\r\n// add movie player to your view\r\n[self.view addSubview:moviePlayer.view];\r\n    \r\n//set contentURL\r\n[moviePlayer setContentURL:[NSURL URLWithString:@\"http://archive.org/download/WaltDisneyCartoons-MickeyMouseMinnieMouseDonaldDuckGoofyAndPluto/WaltDisneyCartoons-MickeyMouseMinnieMouseDonaldDuckGoofyAndPluto-HawaiianHoliday1937-Video.mp4\"]];\r\n```\r\n\r\n**On rotation:**\r\n\r\n```objc\r\nif (!self.moviePlayer.isFullscreen) {\r\n    [self.moviePlayer setFrame:frame];\r\n    //\"frame\" is whatever the movie player's frame should be at that given moment\r\n}\r\n```\r\n\r\n**Note:** you MUST use ```[ALMoviePlayerController setFrame:]``` to adjust frame, NOT ```[ALMoviePlayerController.view setFrame:]```\r\n\r\n### Delegate methods\r\n\r\n```objc\r\n@required\r\n- (void)moviePlayerWillMoveFromWindow;\r\n```\r\n\r\n```objc\r\n@optional\r\n- (void)movieTimedOut;\r\n```\r\n\r\n**Note:** ```moviePlayerWillMoveFromWindow``` is required for fullscreen mode to work properly. It should be used to re-add the movie player to your view controller's view (because during the transition to fullscreen, it was moved to ```[[UIApplication sharedApplication] keyWindow]```. \r\n\r\nYour code might look something like this:\r\n\r\n```objc\r\nif (![self.view.subviews containsObject:self.moviePlayer.view])\r\n    [self.view addSubview:self.moviePlayer.view];\r\n    \r\n[self.moviePlayer setFrame:frame];\r\n```\r\n\r\n### Controls Properties\r\n\r\nALMoviePlayerControls has the following editable properties:\r\n\r\n```objc\r\n/** \r\n The style of the controls. Can be changed on the fly.\r\n \r\n Default value is ALMoviePlayerControlsStyleDefault\r\n */\r\n@property (nonatomic, assign) ALMoviePlayerControlsStyle style;\r\n\r\n/** \r\n The state of the controls.\r\n */\r\n@property (nonatomic, readonly) ALMoviePlayerControlsState state;\r\n\r\n/**\r\n The color of the control bars. \r\n \r\n Default value is black with a hint of transparency.\r\n */\r\n@property (nonatomic, strong) UIColor *barColor;\r\n\r\n/**\r\n The height of the control bars. \r\n \r\n Default value is 70.f for iOS7+ and 50.f for previous versions.\r\n */\r\n@property (nonatomic, assign) CGFloat barHeight;\r\n\r\n/**\r\n The amount of time that the controls should stay on screen before automatically hiding.\r\n \r\n Default value is 5 seconds.\r\n */\r\n@property (nonatomic, assign) NSTimeInterval fadeDelay;\r\n\r\n/**\r\n The rate at which the movie should fastforward or rewind.\r\n \r\n Default value is 3x.\r\n */\r\n@property (nonatomic, assign) float seekRate;\r\n\r\n/**\r\n Should the fullscreen image change when transitioning to/from fullscreen?\r\n \r\n Default is YES.\r\n */\r\n@property (nonatomic) BOOL adjustsFullscreenImage;\r\n\r\n/** \r\n Should the time-remaining number decrement as the video plays?\r\n \r\n Default value is NO.\r\n */\r\n@property (nonatomic) BOOL timeRemainingDecrements;\r\n\r\n/**\r\n Are the controls currently showing on screen?\r\n */\r\n@property (nonatomic, readonly, getter = isShowing) BOOL showing;\r\n```\r\n\r\n### Controls Styles\r\n\r\n```objc\r\ntypedef enum {\r\n    /** Controls will appear in a bottom bar */\r\n    ALMoviePlayerControlsStyleEmbedded,\r\n    \r\n    /** Controls will appear in a top bar and bottom bar */\r\n    ALMoviePlayerControlsStyleFullscreen,\r\n    \r\n    /** Controls will appear as ALMoviePlayerControlsStyleFullscreen when in fullscreen and ALMoviePlayerControlsStyleEmbedded at all other times */\r\n    ALMoviePlayerControlsStyleDefault,\r\n    \r\n    /** Controls will not appear */\r\n    ALMoviePlayerControlsStyleNone,\r\n    \r\n} ALMoviePlayerControlsStyle;\r\n```\r\n\r\n## Suggestions?\r\n\r\nIf you have any suggestions, let me know! If you find any bugs, please open a new issue.\r\n\r\n## Contact Me\r\n\r\nYou can reach me anytime at the addresses below. If you use the library, feel free to give me a shoutout on Twitter to let me know how you like it. I'd love to hear your thoughts. \r\n\r\nGithub: [alobi](https://github.com/alobi) <br>\r\nTwitter: [@lobi4nco](https://twitter.com/lobi4nco) <br>\r\nEmail: [anthony@lobian.co](mailto:anthony@lobian.co) \r\n\r\n## Credits & License\r\n\r\nALMoviePlayerController is developed and maintained by Anthony Lobianco ([@lobi4nco](https://twitter.com/lobi4nco)). Licensed under the MIT License. Basically, I would appreciate attribution if you use it.\r\n\r\nEnjoy!\r\n\r\n(⌐■_■)\r\n","google":"UA-44765325-1","note":"Don't delete this file! It's used internally to help with page regeneration."}